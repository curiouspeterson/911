-- Create custom types
CREATE TYPE public.user_role AS ENUM ('employee', 'supervisor', 'admin');

-- EMPLOYEES TABLE
-- Stores public information about each employee.
CREATE TABLE public.employees (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    phone_number TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.employees IS 'Stores public profile information for each user.';

-- ROLES TABLE
-- Stores the roles that can be assigned to employees.
CREATE TABLE public.roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role user_role NOT NULL UNIQUE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.roles IS 'Defines the roles a user can have within the system.';

-- EMPLOYEE_ROLES TABLE
-- A join table to link employees to their roles.
CREATE TABLE public.employee_roles (
    employee_id UUID NOT NULL REFERENCES public.employees(id) ON DELETE CASCADE,
    role_id BIGINT NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
    PRIMARY KEY (employee_id, role_id)
);
COMMENT ON TABLE public.employee_roles IS 'Assigns roles to employees.';

-- SCHEDULES TABLE
-- Stores the high-level schedule periods (e.g., "Q4 2025 Schedule").
CREATE TABLE public.schedules (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    is_published BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.schedules IS 'Defines a scheduling period.';

-- SHIFTS TABLE
-- Stores individual shifts that need to be filled.
CREATE TABLE public.shifts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    schedule_id BIGINT NOT NULL REFERENCES public.schedules(id) ON DELETE CASCADE,
    start_time TIMESTAMPTZ NOT NULL,
    end_time TIMESTAMPTZ NOT NULL,
    assigned_employee_id UUID REFERENCES public.employees(id) ON DELETE SET NULL,
    -- e.g., 'Paramedic', 'EMT'
    required_qualification TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.shifts IS 'Represents a single work shift within a schedule.';

-- TIME_OFF_REQUESTS TABLE
-- Stores employee requests for time off.
CREATE TYPE public.time_off_status AS ENUM ('pending', 'approved', 'denied');

CREATE TABLE public.time_off_requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id UUID NOT NULL REFERENCES public.employees(id) ON DELETE CASCADE,
    start_time TIMESTAMPTZ NOT NULL,
    end_time TIMESTAMPTZ NOT NULL,
    reason TEXT,
    status time_off_status DEFAULT 'pending' NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
COMMENT ON TABLE public.time_off_requests IS 'Stores employee requests for time off.';

-- RLS POLICIES
-- Enable RLS for all tables
ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.employee_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.shifts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.time_off_requests ENABLE ROW LEVEL SECURITY;

-- Policies for EMPLOYEES
CREATE POLICY "Employees can view their own profile." ON public.employees FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Employees can update their own profile." ON public.employees FOR UPDATE USING (auth.uid() = id);

-- Policies for ROLES
-- For now, allow all authenticated users to see the available roles.
CREATE POLICY "Authenticated users can view roles." ON public.roles FOR SELECT TO authenticated USING (true);

-- Policies for EMPLOYEE_ROLES
CREATE POLICY "Employees can view their own roles." ON public.employee_roles FOR SELECT USING (auth.uid() = employee_id);

-- Policies for SCHEDULES
-- For now, allow all authenticated users to see schedules.
CREATE POLICY "Authenticated users can view schedules." ON public.schedules FOR SELECT TO authenticated USING (true);

-- Policies for SHIFTS
-- For now, allow all authenticated users to see shifts.
CREATE POLICY "Authenticated users can view shifts." ON public.shifts FOR SELECT TO authenticated USING (true);

-- Policies for TIME_OFF_REQUESTS
CREATE POLICY "Employees can view their own time off requests." ON public.time_off_requests FOR SELECT USING (auth.uid() = employee_id);
CREATE POLICY "Employees can create their own time off requests." ON public.time_off_requests FOR INSERT WITH CHECK (auth.uid() = employee_id);
CREATE POLICY "Employees can update their own pending time off requests." ON public.time_off_requests FOR UPDATE USING (auth.uid() = employee_id AND status = 'pending');
