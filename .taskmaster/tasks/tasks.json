{
  "master": {
    "tasks": [
      {
        "id": 0,
        "title": "Task 0: Algorithm Spike - TypeScript-Native Scheduling POC",
        "description": "De-risk the project by building a focused proof-of-concept (POC) of a custom, TypeScript-native greedy scheduling algorithm. This task replaces the Google OR-Tools spike and must validate that a pure TypeScript approach can satisfy the core scheduling constraints without native dependencies.",
        "priority": "critical",
        "dependencies": [],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Define POC Scope and Greedy Algorithm Logic",
            "description": "Select the most critical constraints and outline the step-by-step logic for the greedy assignment algorithm in pseudocode.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Implement TypeScript Greedy Scheduler Script",
            "description": "Write the core POC script in TypeScript that models the constraints and attempts to find a valid schedule.",
            "dependencies": [
              "0.1"
            ],
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Analyze Results and Document Findings",
            "description": "Run the script, analyze the generated schedule for correctness, and write a summary report of the findings, including a recommendation to proceed with the full implementation.",
            "dependencies": [
              "0.2"
            ],
            "status": "complete"
          }
        ]
      },
      {
        "id": 1,
        "title": "Project Setup and Infrastructure Configuration",
        "description": "Verify and complete the project setup based on the Supabase Next.js starter template. Ensure all remaining configurations are in place.",
        "priority": "high",
        "dependencies": [],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js 15 Project with TypeScript and App Router",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Configure Code Quality, Linting, and Pre-commit Hooks",
            "description": "Set up ESLint, Prettier, and Husky for code quality enforcement and pre-commit checks.",
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Provision Supabase Project and Integrate Secure Authentication",
            "status": "complete"
          },
          {
            "id": 4,
            "title": "Set Up CI/CD Pipeline and Multi-Environment Deployment",
            "description": "Configure GitHub Actions for continuous integration and deployment to Vercel.",
            "status": "complete"
          },
          {
            "id": 5,
            "title": "Install Core Dependencies and Dockerize Development",
            "status": "complete"
          }
        ]
      },
      {
        "id": 4,
        "title": "Database Schema Design and Implementation",
        "description": "Design and implement the application-specific database schema based on the PRD (Section 7).",
        "priority": "critical",
        "dependencies": [
          1
        ],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Core Schema Migration",
            "description": "Write the SQL migration file to create the `profiles`, `roles`, `user_roles`, `shifts`, and `staffing_requirements` tables.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Create Scheduling Schema Migration",
            "description": "Write the SQL migration file to create the `schedules` and `assigned_shifts` tables.",
            "dependencies": [
              "4.1"
            ],
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Create Self-Service & Comms Schema Migration",
            "description": "Write the SQL migration file to create the `time_off_requests`, `shift_swaps`, `chat_messages`, `notifications`, and `audit_logs` tables.",
            "dependencies": [
              "4.2"
            ],
            "status": "complete"
          },
          {
            "id": 4,
            "title": "Implement RLS Policies",
            "description": "Write and apply the RLS policies for all new tables as defined in the ARCHITECTURE.md.",
            "dependencies": [
              "4.3"
            ],
            "status": "complete"
          },
          {
            "id": 5,
            "title": "Develop Seeding Script",
            "description": "Create a TypeScript script to seed all new tables with realistic test data.",
            "dependencies": [
              "4.3"
            ],
            "status": "complete"
          }
        ]
      },
      {
        "id": 3,
        "title": "Authentication and Role-Based Access Control (RBAC)",
        "description": "Extend the existing Supabase Auth to include application-specific roles and permissions (FR-2.0).",
        "priority": "high",
        "dependencies": [
          1,
          2,
          4
        ],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Role Assignment Trigger",
            "description": "Write a PostgreSQL function and trigger in Supabase to automatically insert a new row into `user_roles` with a default 'dispatcher' role when a new user signs up.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Implement RBAC Middleware",
            "description": "Update the Next.js middleware to fetch the user's role(s) and protect routes based on those roles (e.g., `/admin` routes).",
            "dependencies": [
              "3.1"
            ],
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Create Role-Protection Helper for Server Actions",
            "description": "Develop a helper function (e.g., `withRoleCheck`) to easily protect Server Actions based on user roles.",
            "dependencies": [
              "3.1"
            ],
            "status": "complete"
          },
          {
            "id": 4,
            "title": "Build Admin UI for Role Management",
            "description": "Create a simple UI for users with the 'admin' role to view and change other users' roles.",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "status": "complete"
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Centralized Error Handling System",
        "description": "Develop a robust error handling and logging system to diagnose and troubleshoot issues (FR-1.0).",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Server-Side Error Boundaries",
            "description": "Create root and route-level `error.tsx` files to gracefully handle server-side rendering errors.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Implement Client-Side Error Boundary",
            "description": "Create a reusable React Error Boundary component to wrap key sections of the UI and prevent application crashes.",
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Integrate External Logging Service",
            "description": "Set up and configure an external logging service like Sentry to capture and report errors from both client and server environments.",
            "status": "complete"
          },
          {
            "id": 4,
            "title": "Create User-Facing Error Components",
            "description": "Build toast and modal components (using shadcn/ui) to display user-friendly error messages for non-critical failures (e.g., failed form submissions).",
            "status": "complete"
          }
        ]
      },
      {
        "id": 5,
        "title": "User Profile Management",
        "description": "Implement user profile management functionality (FR-3.0).",
        "priority": "medium",
        "dependencies": [
          3,
          4
        ],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Server Action for Profile Updates",
            "description": "Write a Server Action `updateUserProfile` that takes user data, validates it with Zod, and updates the `profiles` table.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Build Profile View Page",
            "description": "Create a React Server Component that fetches and displays the current user's profile data.",
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Build Profile Edit Form",
            "description": "Create a client component with a form (using React Hook Form) that allows users to edit their profile and calls the `updateUserProfile` Server Action.",
            "status": "complete"
          }
        ]
      },
      {
        "id": 6,
        "title": "Read-Only Schedule View Implementation",
        "description": "Develop an intuitive calendar or list view for users to see the master schedule (FR-4.0).",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Data Fetching Logic",
            "description": "Create a Server Action or server-side fetch function to retrieve schedule data based on the logged-in user's role and a given date range.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Build Core Calendar Component",
            "description": "Develop the main `ScheduleCalendar` component (using a library like `react-big-calendar` or a custom grid) to display shifts.",
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Implement Filtering Controls",
            "description": "For the Supervisor view, create client components for filtering the schedule by employee, role, or shift type.",
            "status": "complete"
          },
          {
            "id": 4,
            "title": "Implement Coverage Gap Highlighting",
            "description": "Write the logic to compare the rendered schedule against `staffing_requirements` and visually highlight any shortfalls.",
            "status": "complete"
          }
        ]
      },
      {
        "id": 8,
        "title": "Automated Schedule Generation Algorithm",
        "description": "Develop the core scheduling engine as a pure TypeScript module that generates compliant 4-month schedules (FR-6.0).",
        "priority": "high",
        "dependencies": [
          0,
          4,
          7
        ],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Develop Core Data Structures & Types",
            "description": "Define the TypeScript interfaces and classes that will represent employees, shifts, and the schedule state within the algorithm.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Implement Constraint Checker Functions",
            "description": "Create a library of pure functions to check for violations of hard constraints (e.g., `isPatternAdherent`, `hasExceededWeeklyHours`).",
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Implement Main Greedy Scheduling Loop",
            "description": "Write the primary algorithm that iterates through each day and assigns employees based on the prioritized rules.",
            "status": "complete"
          },
          {
            "id": 4,
            "title": "Implement Gap-Filling & Validation Logic",
            "description": "Write the final pass of the algorithm that validates the generated schedule and attempts to fill any remaining gaps.",
            "status": "complete"
          },
          {
            "id": 5,
            "title": "Wrap Algorithm in a Server Action",
            "description": "Create the `generateSchedule` Server Action that fetches data from Supabase, runs the algorithm, and saves the result as a 'draft' schedule.",
            "status": "complete"
          }
        ]
      },
      {
        "id": 9,
        "title": "Manual Schedule Management Interface",
        "description": "Create an interface for administrators to manually adjust generated schedules (FR-7.0).",
        "priority": "high",
        "dependencies": [
          6,
          8
        ],
        "status": "complete",
        "subtasks": [
          {
            "id": 1,
            "title": "Build Drag-and-Drop UI",
            "description": "Implement a drag-and-drop interface on the schedule calendar (using a library like `react-dnd`) to reassign shifts.",
            "status": "complete"
          },
          {
            "id": 2,
            "title": "Create Shift Management Server Actions",
            "description": "Write Server Actions for `create`, `update`, and `delete` operations on the `assigned_shifts` table.",
            "status": "complete"
          },
          {
            "id": 3,
            "title": "Integrate Real-Time Updates",
            "description": "Set up Supabase Realtime subscriptions on the schedule view to instantly reflect changes made by other supervisors.",
            "status": "complete"
          },
          {
            "id": 4,
            "title": "Implement Audit Logging for Manual Changes",
            "description": "Create a database trigger or modify Server Actions to insert a record into `audit_logs` for every manual schedule change.",
            "status": "complete"
          }
        ]
      },
      {
        "id": 10,
        "title": "Time-Off Management System",
        "description": "Implement the time-off request and approval system (FR-8.0).",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Build Time-Off Request Form & Action",
            "description": "Create the UI and Server Action for dispatchers to submit new time-off requests."
          },
          {
            "id": 2,
            "title": "Build 'My Requests' View",
            "description": "Create a page for dispatchers to view the status and history of their own time-off requests."
          },
          {
            "id": 3,
            "title": "Build Supervisor Approval Queue",
            "description": "Create the UI for supervisors to see a list of pending requests, including any potential staffing conflicts."
          },
          {
            "id": 4,
            "title": "Create Approval/Denial Server Actions",
            "description": "Write the Server Actions for supervisors to approve or deny requests, which will update the request status and trigger notifications."
          }
        ]
      },
      {
        "id": 11,
        "title": "Shift Swapping System",
        "description": "Develop functionality for employees to propose and supervisors to approve/deny shift swaps (FR-9.0).",
        "priority": "medium",
        "dependencies": [
          6,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Build 'Propose Swap' UI & Action",
            "description": "Create the UI for a dispatcher to select one of their shifts and propose a swap with an eligible colleague."
          },
          {
            "id": 2,
            "title": "Build Swap Response UI & Action",
            "description": "Create the UI for the targeted employee to view and either accept or reject the swap proposal."
          },
          {
            "id": 3,
            "title": "Build Supervisor Swap Approval Queue",
            "description": "Create the UI for supervisors to see accepted swap proposals and give final approval or denial."
          },
          {
            "id": 4,
            "title": "Implement Swap Workflow Server Actions",
            "description": "Write the set of Server Actions to manage the state transitions of a swap (propose, accept/reject, approve/deny)."
          }
        ]
      },
      {
        "id": 12,
        "title": "Integrated Chat System",
        "description": "Implement a real-time chat feature (FR-10.0).",
        "priority": "low",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Supabase Realtime for Chat",
            "description": "Set up the necessary database tables (`chat_messages`) and RLS policies for secure, real-time communication."
          },
          {
            "id": 2,
            "title": "Build ChatWindow Component",
            "description": "Create the main chat UI, including the message display area and the message input form."
          },
          {
            "id": 3,
            "title": "Build ConversationList Component",
            "description": "Create the UI panel that lists available users and group chats for the user to select."
          },
          {
            "id": 4,
            "title": "Implement User Presence Indicators",
            "description": "Use Supabase's presence feature to show online/offline status for users in the conversation list."
          }
        ]
      },
      {
        "id": 13,
        "title": "Real-time Notification System",
        "description": "Implement in-app and email notifications (FR-11.0).",
        "priority": "medium",
        "dependencies": [
          3,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Notification Database Triggers",
            "description": "Write PostgreSQL functions to automatically insert a row into the `notifications` table when key events occur (e.g., a schedule is published)."
          },
          {
            "id": 2,
            "title": "Set Up In-App Notification System",
            "description": "Use Supabase Realtime to listen for new rows in the `notifications` table and display them as toasts in the UI."
          },
          {
            "id": 3,
            "title": "Build Notification Center UI",
            "description": "Create a component that displays a history of a user's notifications and allows them to be marked as read."
          },
          {
            "id": 4,
            "title": "Integrate Email Notification Service",
            "description": "Create a Supabase Edge Function that is triggered on new notifications and uses a service like SendGrid to send an email."
          }
        ]
      },
      {
        "id": 14,
        "title": "Auditing and Reporting System",
        "description": "Develop comprehensive reporting tools for administrators (FR-12.0).",
        "priority": "low",
        "dependencies": [
          4,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Audit Logging Triggers",
            "description": "Write PostgreSQL functions and triggers to automatically create an `audit_logs` record for all critical data mutations."
          },
          {
            "id": 2,
            "title": "Build Admin UI for Audit Log",
            "description": "Create a page for admins to view, search, and filter the audit log."
          },
          {
            "id": 3,
            "title": "Create Server Actions for Report Data",
            "description": "Write Server Actions that perform complex queries to aggregate data for reports (e.g., calculate overtime hours per employee)."
          },
          {
            "id": 4,
            "title": "Build Report Visualization UI",
            "description": "Create React components that fetch report data and display it using a charting library like Recharts."
          }
        ]
      },
      {
        "id": 15,
        "title": "Performance Optimization and Quality Assurance",
        "description": "Ensure the application meets all non-functional requirements (NFRs).",
        "priority": "high",
        "dependencies": [
          2,
          6,
          8,
          9,
          13,
          14
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up Performance Monitoring",
            "description": "Integrate Lighthouse CI into the CI/CD pipeline to automatically run performance audits on every pull request."
          },
          {
            "id": 2,
            "title": "Conduct Accessibility Audit",
            "description": "Perform a full manual and automated accessibility review of the application, ensuring WCAG 2.1 AA compliance."
          },
          {
            "id": 3,
            "title": "Implement Load Testing",
            "description": "Write and execute load tests (using a tool like k6) against key Server Actions to ensure they meet scalability requirements."
          },
          {
            "id": 4,
            "title": "Conduct Security Audit",
            "description": "Perform a security review, including scanning for dependency vulnerabilities and manually testing RLS policies for potential bypasses."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-27T01:06:31.014Z",
      "updated": "2025-07-27T03:30:00.000Z",
      "description": "Tasks for master context. Pivoted from node_or_tools to a custom TypeScript scheduling algorithm and added comprehensive subtasks for all complex items."
    }
  }
}
